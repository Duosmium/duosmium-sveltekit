datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// SciolyFF
// TODO: make sure the right stuff is/isn't optional

model Result {
  id         String      @id
  tournament Tournament?
  logo       String?
  color      String?
}

model Tournament {
  id                            Int               @id @default(autoincrement())
  teams                         Team[]
  events                        TournamentEvent[]
  tracks                        Track[]
  placings                      Placing[]
  penalties                     Penalty[]
  raws                          Raw[]
  histograms                    Histogram[]
  location                      Location          @relation(fields: [locationId], references: [id], onDelete: Restrict)
  locationId                    Int
  level                         Level
  division                      Division
  year                          Int
  name                          String?
  shortName                     String?
  medals                        Int
  trophies                      Int
  bids                          Int               @default(0)
  bidsPerSchool                 Int               @default(1)
  worstPlacingsDropped          Int               @default(0)
  exemptPlacings                Int               @default(0)
  reverseScoring                Boolean           @default(false)
  maximumPlace                  Int
  perEventN                     String
  nOffset                       Int               @default(0)
  startDate                     DateTime
  endDate                       DateTime
  awardsDate                    DateTime?
  testRelease                   String?
  hasCustomMaximumPlace         Boolean
  hasTies                       Boolean
  hasTiesOutsideOfMaximumPlaces Boolean
  hasTracks                     Boolean
  largestPlace                  Int
  nonExhibitionTeamsCount       Int
  // _topTeamsPerSchool can be calculated via database queries
  // _teamsEligibleForBids can be calculated via database queries
  result                        Result?           @relation(fields: [resultId], references: [id])
  resultId                      String?           @unique
}

model Team {
  id                         Int         @id @default(autoincrement())
  number                     Int
  school                     School      @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  tournament                 Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId               Int?
  schoolId                   Int
  placings                   Placing[]
  penalties                  Penalty[]
  track                      Track?      @relation(fields: [trackId], references: [id], onDelete: SetNull)
  trackId                    Int?
  rank                       Int
  trackRank                  Int?
  points                     Int
  trackPoints                Int?
  earnedBid                  Boolean     @default(false)
  // worstPlacingsToBeDropped can be calculated via queries
  trialEventPoints           Int
  trackTrialEventPoints      Int?
  medalCounts                Int[]
  trialEventMedalCounts      Int[]
  trackMedalCounts           Int[]
  trackTrialEventMedalCounts Int[]

  @@unique([tournamentId, number])
}

model Event {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  tournamentEvents TournamentEvent[]
}

model TournamentEvent {
  id            Int         @id @default(autoincrement())
  tournament    Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId  Int?
  event         Event?      @relation(fields: [eventId], references: [id], onDelete: Restrict)
  eventId       Int?
  placings      Placing[]
  raws          Raw[]
  trial         Boolean     @default(false)
  trialed       Boolean     @default(false)
  lowScoreWins  Boolean     @default(false)
  highScoreWins Boolean     @default(true)
  histoData     HistoData?
  medals        Int
  maximumPlace  Int
}

model Track {
  id           Int         @id @default(autoincrement())
  tournament   Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId Int?
  teams        Team[]
  placings     Placing[]
  penalties    Penalty[]
  name         String
  medals       Int
  trophies     Int
  maximumPlace Int

  @@unique([tournamentId, name])
}

model Placing {
  id                               Int              @id @default(autoincrement())
  tournament                       Tournament?      @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId                     Int?
  event                            TournamentEvent? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId                          Int?
  team                             Team?            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId                           Int?
  participated                     Boolean          @default(true)
  disqualified                     Boolean          @default(false)
  exempt                           Boolean          @default(false)
  unknown                          Boolean          @default(false)
  explicit                         Boolean          @default(false)
  trackPlace                       Int?
  raw                              Raw?
  rawId                            Int?
  // hasRaw can be calculated via database queries
  // didNotParticipate can be calculated via database queries
  participationOnly                Boolean          @default(false)
  droppedAsPartOfWorstPlacings     Boolean          @default(false)
  tie                              Boolean          @default(false)
  place                            Int
  initiallyConsideredForTeamPoints Boolean          @default(true)
  consideredForTeamPoints          Boolean          @default(true)
  isolatedPoints                   Int
  isolatedTrackPoints              Int?
  points                           Int
  trackPoints                      Int?
  pointsAffectedByExhibition       Boolean          @default(false)
  pointsLimitedByMaximumPlace      Boolean          @default(false)
  trackExhibitionPlacingsBehind    Int?
  exhibitionPlacingsBehind         Int              @default(0)
  track                            Track?           @relation(fields: [trackId], references: [id], onDelete: SetNull)
  trackId                          Int?

  @@unique([tournamentId, eventId, teamId])
}

model Penalty {
  id           Int         @id @default(autoincrement())
  tournament   Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId Int?
  team         Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       Int?
  points       Int
  track        Track?      @relation(fields: [trackId], references: [id], onDelete: SetNull)
  trackId      Int?

  @@unique([tournamentId, teamId])
}

model Raw {
  id             Int              @id @default(autoincrement())
  tournament     Tournament?      @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId   Int?
  event          TournamentEvent? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId        Int?
  lowScoreWins   Boolean          @default(false)
  score          Float
  tier           Int              @default(1)
  tiered         Boolean          @default(false)
  tiebreakerRank Int              @default(1)
  lostTieBreaker Boolean          @default(false)
  placing        Placing?         @relation(fields: [placingId], references: [id], onDelete: Cascade)
  placingId      Int?             @unique
}

model School {
  id         Int      @id @default(autoincrement())
  teams      Team[]
  location   Location @relation(fields: [locationId], references: [id])
  locationId Int      @unique
}

model HistoData {
  id       Int              @id @default(autoincrement())
  parent   Histogram        @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int
  event    TournamentEvent? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  Int?             @unique
  start    Float
  width    Float
  counts   Float[]
  // TODO: how to model info?
  // TODO: is this unique in any way?
}

model Histogram {
  id           Int         @id @default(autoincrement())
  tournament   Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  type         String
  url          String?
  data         HistoData[]
  tournamentId Int
  // TODO: is this unique in any way?
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  city        String?
  state       String
  latitude    Float?
  longitude   Float?
  school      School?
  schoolId    Int?
  tournaments Tournament[]

  @@unique([name, city, state])
}

enum Level {
  Invitational
  Regionals
  States
  Nationals
}

enum Division {
  A
  B
  C
}
