datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = []
  schemas    = ["public"]
  directUrl  = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
}

// SciolyFF

model Result {
  id         Int         @id @default(autoincrement())
  duosmiumId String      @unique
  tournament Tournament?
  logo       String?
  color      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@schema("public")
}

model Tournament {
  id                            Int               @id @default(autoincrement())
  teams                         Team[]
  tournamentEvents              TournamentEvent[]
  tracks                        Track[]
  placings                      Placing[]
  penalties                     Penalty[]
  histogram                     Histogram?
  location                      Location          @relation(fields: [locationId], references: [id], onDelete: Restrict)
  locationId                    Int
  level                         Level
  division                      Division
  year                          Int
  name                          String?
  shortName                     String?
  medals                        Int
  trophies                      Int
  bids                          Int               @default(0)
  bidsPerSchool                 Int               @default(1)
  worstPlacingsDropped          Int               @default(0)
  exemptPlacings                Int               @default(0)
  reverseScoring                Boolean           @default(false)
  maximumPlace                  Int
  perEventN                     String?
  nOffset                       Int               @default(0)
  startDate                     DateTime          @db.Date
  endDate                       DateTime          @db.Date
  awardsDate                    DateTime?         @db.Date
  testRelease                   String?
  hasCustomMaximumPlace         Boolean
  hasTies                       Boolean
  hasTiesOutsideOfMaximumPlaces Boolean
  hasTracks                     Boolean
  largestPlace                  Int?
  nonExhibitionTeamsCount       Int
  // _topTeamsPerSchool can be calculated via database queries
  // _teamsEligibleForBids can be calculated via database queries
  result                        Result?           @relation(fields: [resultId], references: [id], onDelete: Cascade)
  resultId                      Int?              @unique
  histogramId                   Int?
  sourceData                    Json?             @db.JsonB

  @@schema("public")
}

model Team {
  id                         Int        @id @default(autoincrement())
  number                     Int
  location                   Location   @relation(fields: [locationId], references: [id], onDelete: Restrict)
  locationId                 Int
  tournament                 Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId               Int
  placings                   Placing[]
  penalties                  Penalty[]
  track                      Track?     @relation(fields: [trackId], references: [id], onDelete: SetNull)
  trackId                    Int?
  rank                       Int
  trackRank                  Int?
  points                     Int
  trackPoints                Int?
  earnedBid                  Boolean    @default(false)
  // worstPlacingsToBeDropped can be calculated via queries
  trialEventPoints           Int
  trackTrialEventPoints      Int?
  medalCounts                Int[]
  trialEventMedalCounts      Int[]
  trackMedalCounts           Int[]
  trackTrialEventMedalCounts Int[]
  raws                       Raw[]
  sourceData                 Json?      @db.JsonB

  @@unique([tournamentId, number])
  @@schema("public")
}

model Event {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  tournamentEvents TournamentEvent[]

  @@schema("public")
}

model TournamentEvent {
  id            Int        @id @default(autoincrement())
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId  Int
  event         Event      @relation(fields: [eventId], references: [id], onDelete: Restrict)
  eventId       Int
  placings      Placing[]
  raws          Raw[]
  trial         Boolean    @default(false)
  trialed       Boolean    @default(false)
  lowScoreWins  Boolean    @default(false)
  highScoreWins Boolean    @default(true)
  histoData     HistoData?
  medals        Int?
  maximumPlace  Int
  sourceData    Json?      @db.JsonB

  @@unique([tournamentId, eventId])
  @@schema("public")
}

model Track {
  id           Int         @id @default(autoincrement())
  tournament   Tournament? @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId Int?
  teams        Team[]
  placings     Placing[]
  penalties    Penalty[]
  name         String
  medals       Int
  trophies     Int
  maximumPlace Int
  sourceData   Json?       @db.JsonB

  @@unique([tournamentId, name])
  @@schema("public")
}

model Placing {
  id                               Int             @id @default(autoincrement())
  tournament                       Tournament      @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId                     Int
  tournamentEvent                  TournamentEvent @relation(fields: [tournamentEventId], references: [id], onDelete: Cascade)
  tournamentEventId                Int
  team                             Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId                           Int
  participated                     Boolean         @default(true)
  disqualified                     Boolean         @default(false)
  exempt                           Boolean         @default(false)
  unknown                          Boolean         @default(false)
  explicit                         Boolean         @default(false)
  trackPlace                       Int?
  raw                              Raw?
  rawId                            Int?
  // hasRaw can be calculated via database queries
  // didNotParticipate can be calculated via database queries
  participationOnly                Boolean         @default(false)
  droppedAsPartOfWorstPlacings     Boolean         @default(false)
  tie                              Boolean         @default(false)
  place                            Int?
  initiallyConsideredForTeamPoints Boolean         @default(true)
  consideredForTeamPoints          Boolean         @default(true)
  isolatedPoints                   Int
  isolatedTrackPoints              Int?
  points                           Int?
  trackPoints                      Int?
  pointsAffectedByExhibition       Boolean         @default(false)
  pointsLimitedByMaximumPlace      Boolean         @default(false)
  trackExhibitionPlacingsBehind    Int?
  exhibitionPlacingsBehind         Int             @default(0)
  track                            Track?          @relation(fields: [trackId], references: [id], onDelete: SetNull)
  trackId                          Int?
  sourceData                       Json?           @db.JsonB

  @@unique([tournamentEventId, teamId])
  @@schema("public")
}

model Penalty {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId Int
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       Int
  points       Int
  track        Track?     @relation(fields: [trackId], references: [id], onDelete: SetNull)
  trackId      Int?
  sourceData   Json?      @db.JsonB

  @@unique([tournamentId, teamId])
  @@schema("public")
}

model Raw {
  id                Int             @id @default(autoincrement())
  tournamentEvent   TournamentEvent @relation(fields: [tournamentEventId], references: [id], onDelete: Cascade)
  tournamentEventId Int
  lowScoreWins      Boolean         @default(false)
  score             Float
  tier              Int             @default(1)
  tiered            Boolean         @default(false)
  tiebreakerRank    Int             @default(1)
  lostTieBreaker    Boolean         @default(false)
  placing           Placing         @relation(fields: [placingId], references: [id], onDelete: Cascade)
  placingId         Int             @unique
  team              Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId            Int
  sourceData        Json?           @db.JsonB

  @@schema("public")
}

model HistoData {
  id                Int             @id @default(autoincrement())
  parent            Histogram       @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId          Int
  tournamentEvent   TournamentEvent @relation(fields: [tournamentEventId], references: [id], onDelete: Cascade)
  tournamentEventId Int             @unique
  start             Float
  width             Float
  counts            Float[]
  info              Json?           @db.JsonB

  @@schema("public")
}

model Histogram {
  id           Int         @id @default(autoincrement())
  tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  type         String
  url          String?
  data         HistoData[]
  tournamentId Int         @unique
  sourceData   Json?       @db.JsonB

  @@schema("public")
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  city        String
  state       String
  latitude    Float?
  longitude   Float?
  tournaments Tournament[]
  Team        Team[]

  @@unique([name, city, state])
  @@schema("public")
}

enum Level {
  Invitational
  Regionals
  States
  Nationals

  @@schema("public")
}

enum Division {
  A
  B
  C

  @@schema("public")
}
